// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hangman.proto

package monolith

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Hi1 struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hi1) Reset()         { *m = Hi1{} }
func (m *Hi1) String() string { return proto.CompactTextString(m) }
func (*Hi1) ProtoMessage()    {}
func (*Hi1) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbcef6f769ac2a46, []int{0}
}

func (m *Hi1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hi1.Unmarshal(m, b)
}
func (m *Hi1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hi1.Marshal(b, m, deterministic)
}
func (m *Hi1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hi1.Merge(m, src)
}
func (m *Hi1) XXX_Size() int {
	return xxx_messageInfo_Hi1.Size(m)
}
func (m *Hi1) XXX_DiscardUnknown() {
	xxx_messageInfo_Hi1.DiscardUnknown(m)
}

var xxx_messageInfo_Hi1 proto.InternalMessageInfo

func (m *Hi1) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Hi1)(nil), "monolith.Hi1")
}

func init() { proto.RegisterFile("hangman.proto", fileDescriptor_fbcef6f769ac2a46) }

var fileDescriptor_fbcef6f769ac2a46 = []byte{
	// 110 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x48, 0xcc, 0x4b,
	0xcf, 0x4d, 0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc8, 0xcd, 0xcf, 0xcb, 0xcf,
	0xc9, 0x2c, 0xc9, 0x50, 0x92, 0xe4, 0x62, 0xf6, 0xc8, 0x34, 0x14, 0x12, 0xe2, 0x62, 0xc9, 0x4b,
	0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x8d, 0x74, 0xb8, 0x58, 0x3d,
	0x52, 0x73, 0x72, 0xf2, 0x85, 0x94, 0xb9, 0x98, 0x83, 0x13, 0x2b, 0x85, 0x78, 0xf5, 0x60, 0xba,
	0xf4, 0x3c, 0x32, 0x0d, 0xa5, 0x50, 0xb9, 0x4e, 0x4c, 0x1e, 0x8c, 0x49, 0x6c, 0x60, 0xd3, 0x8d,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x45, 0xea, 0x66, 0x6e, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloClient interface {
	Say(ctx context.Context, in *Hi1, opts ...grpc.CallOption) (*Hi1, error)
}

type helloClient struct {
	cc *grpc.ClientConn
}

func NewHelloClient(cc *grpc.ClientConn) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) Say(ctx context.Context, in *Hi1, opts ...grpc.CallOption) (*Hi1, error) {
	out := new(Hi1)
	err := c.cc.Invoke(ctx, "/monolith.Hello/Say", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloServer is the server API for Hello service.
type HelloServer interface {
	Say(context.Context, *Hi1) (*Hi1, error)
}

// UnimplementedHelloServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServer struct {
}

func (*UnimplementedHelloServer) Say(ctx context.Context, req *Hi1) (*Hi1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Say not implemented")
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hi1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monolith.Hello/Say",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).Say(ctx, req.(*Hi1))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monolith.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Say",
			Handler:    _Hello_Say_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hangman.proto",
}
